openapi: 3.0.3
info:
  title: Social media API
  description: |-
    RESTful API для социальной медиа платформы,
    позволяющей пользователям регистрироваться, входить в систему, создавать
    посты, переписываться, подписываться на других пользователей и получать
    свою ленту активности.
  contact:
    email: svtr1995@mail.ru
  version: 1.0.0
servers:
  - url: https://localhost:8083/
tags:
  - name: Авторизация/Регистрация
  - name: Друзья
  - name: Подписки
  - name: Посты
paths:
  /login:
    post:
      tags:
        - Авторизация/Регистрация
      summary: Авторизироваться на сервере
      description: Операция авторизировации и получения jwt-токена
      operationId: login
      parameters:
        - in: query
          name: username
          description: Имя пользователя
          required: true
          schema:
            type: string
        - in: query
          name: password
          description: Пароль
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успех, в заголовке возвращается jwt-токен
          headers:
            Authorization:
              schema:
                type: string

        '401':
          description: Некорректный логин и/или пароль
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'Bad credentials'
  /register:
    post:
      tags:
        - Авторизация/Регистрация
      summary: Зарегистрироваться на сервере
      description: Создать пользователя с переданными в запросе логином, паролем и электронной почтой
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Успешная регистрация
          content:
            text/html:
              schema:
                type: integer
                description: 'Идентификатор созданного пользователя'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User with such username is already present'
  /subscribe:
    get:
      tags:
        - Подписки
      summary: Подписаться на другого пользователя
      description: Подписаться на посты другого пользователя.
      operationId: subscribeTo
      parameters:
        - name: tags
          in: query
          description: Имя пользователя для подписки
          required: true
          schema:
            type: string
            example: "John"
      responses:
        '200':
          description: Подписка успешна
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User with username John was not found'
    delete:
      tags:
        - Подписки
      summary: Отписаться от пользователя
      description: Отписаться от пользователя, если был подписан
      operationId: unsubscribeFrom
      parameters:
        - name: unsubscribeFrom
          in: query
          description: 'Имя пользователя для отписки'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Подписка успешна
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User with username John was not found'
  /friend_request:
    post:
      tags:
        - Друзья
      summary: Добавить в друзья
      description: Отправить пользователю запрос на добавление в друзья и подписаться
      operationId: sendFriendRequest
      parameters:
        - name: sendTo
          in: query
          description: Имя пользователя для добавления в друзья
          required: true
          schema:
            type: string
          example: "John"
      responses:
        '200':
          description: Сообщение успешно отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User with username John was not found'
    get:
      tags:
        - Друзья
      summary: Принять запрос на добавление в друзья
      description: Принять запрос на добавление в друзья и подписаться в ответ
      operationId: acceptFriendRequest
      parameters:
        - name: add
          in: query
          description: Имя пользователя для добавления в друзья
          required: true
          schema:
            type: string
          example: "John"
      responses:
        '200':
          description: Сообщение успешно отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'No friend request from John was found'
    delete:
      tags:
        - Друзья
      summary: Отклонить запрос на добавление в друзья
      description: Отклонить запрос на добавление в друзья
      operationId: denyFriendRequest
      parameters:
        - name: deny
          in: query
          description: Имя пользователя для отклонения запроса
          required: true
          schema:
            type: string
          example: "John"
      responses:
        '200':
          description: Сообщение успешно отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'No friend request from John was found'
  /friend:
    delete:
      tags:
        - Друзья
      summary: Удалить из друзей
      description: Удалить из друзей и отписаться
      operationId: unfriend
      parameters:
        - name: deny
          in: query
          description: Имя пользователя для удаления
          required: true
          schema:
            type: string
          example: "John"
      responses:
        '200':
          description: Сообщение успешно отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'Not friends with John'
  /user:
    post:
      tags:
        - Друзья
      summary: Отправить сообщение
      description: Отправить сообщение пользователю
      operationId: sendMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageDTO'
        required: true
      responses:
        '200':
          description: Сообщение успешно отправлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User with username John was not found'
    get:
      tags:
        - Друзья
      summary: Получить переписку
      description: Получить историю сообщений с пользователем
      operationId: getMessageHistory
      parameters:
        - name: with
          in: query
          description: Имя пользователя-адресата
          required: true
          schema:
            type: string
          example: "John"
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
          required: true
        - name: size
          in: query
          description: Максимальное количество сообщений на странице
          schema:
            type: integer
          required: true
        - name: sort
          in: query
          description: Порядок сортировки по дате
          schema:
            type: string
            enum: ["asc", "desc"]
          required: true
      responses:
        '200':
          description: Список сообщений с информацией об общем количестве
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagePage'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User with username John was not found'
  /post:
    post:
      tags:
        - Посты
      summary: Создать пост
      description: Создать новый пост
      operationId: addPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Пост успешно создан
          content:
            text/html:
              schema:
                type: integer
                description: Идентификтор созданного поста
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User with username John was not found'
    delete:
      tags:
        - Посты
      summary: Удалить пост
      description: Удалить пост
      operationId: removePost
      parameters:
        - name: id
          in: query
          description: Идентификатор поста для удаления
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Пост успешно удалён

    get:
      tags:
        - Посты
      summary: Получить посты
      description: Получить посты от пользователя из подписок. Если параметр username не заполнен, получить собственные посты
      operationId: getPosts
      parameters:
        - name: username
          in: query
          description: Имя пользователя для получение постов
          schema:
            type: string
          required: false
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
          required: true
        - name: size
          in: query
          description: Максимальное количество постов на странице
          schema:
            type: integer
          required: true
        - name: sort
          in: query
          description: Порядок сортировки по дате
          schema:
            type: string
            enum: ["asc", "desc"]
          required: true
      responses:
        '200':
          description: Список постов с информацией об общем количестве
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPage'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User John is not in subscriptions'
  /feed:
    get:
      tags:
        - Подписки
      summary: Лента
      description: Получить ленту постов от всех пользователей из подписок.
      operationId: getFeed
      parameters:
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
          required: true
        - name: size
          in: query
          description: Максимальное количество постов на странице
          schema:
            type: integer
          required: true
        - name: sort
          in: query
          description: Порядок сортировки по дате
          schema:
            type: string
            enum: ["asc", "desc"]
          required: true
      responses:
        '200':
          description: Список постов с информацией об общем количестве
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPage'
        '400':
          description: Ошибка
          content:
            text/html:
              schema:
                type: string
                description: Сообщение об ошибке
                example: 'User John is not in subscriptions'

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
      xml:
        name: user
    UserWithoutPass:
      type: object
      properties:
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
      xml:
        name: userNoPass
    Post:
      type: object
      properties:
        header:
          type: string
          example: Big header
        content:
          type: string
          example: 'shoking content'
      xml:
        name: user
    Message:
      type: object
      properties:
        id:
          type: integer
          example: 1
        from:
          $ref: '#/components/schemas/UserWithoutPass'
        to:
          $ref: '#/components/schemas/UserWithoutPass'
        dateTime:
          type: string
        content:
          type: string
          example: shocking private content
        type:
          type: string
          enum: [MESSAGE,FRIEND_REQUEST,FRIEND_APPROVE,FRIEND_DENY,FRIEND_REMOVE]
    MessageDTO:
      type: object
      properties:
        to:
          type: string
        content:
          type: string
          example: shocking private content
    MessagePage:
      type: object
      properties:
        currentpage:
          type: integer
        totalitems:
          type: integer
        totalpages:
          type: integer
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    PostPage:
      type: object
      properties:
        currentpage:
          type: integer
        totalitems:
          type: integer
        totalpages:
          type: integer
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Post'